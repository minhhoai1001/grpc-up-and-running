// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order_management.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_order_5fmanagement_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_order_5fmanagement_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_order_5fmanagement_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_order_5fmanagement_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_order_5fmanagement_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_order_5fmanagement_2eproto_metadata_getter(int index);
namespace ecommerce {
class CombinedShipment;
struct CombinedShipmentDefaultTypeInternal;
extern CombinedShipmentDefaultTypeInternal _CombinedShipment_default_instance_;
class Order;
struct OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
}  // namespace ecommerce
PROTOBUF_NAMESPACE_OPEN
template<> ::ecommerce::CombinedShipment* Arena::CreateMaybeMessage<::ecommerce::CombinedShipment>(Arena*);
template<> ::ecommerce::Order* Arena::CreateMaybeMessage<::ecommerce::Order>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ecommerce {

// ===================================================================

class Order PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ecommerce.Order) */ {
 public:
  inline Order() : Order(nullptr) {}
  virtual ~Order();
  explicit constexpr Order(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Order(const Order& from);
  Order(Order&& from) noexcept
    : Order() {
    *this = ::std::move(from);
  }

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline Order& operator=(Order&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Order& default_instance() {
    return *internal_default_instance();
  }
  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
               &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Order& a, Order& b) {
    a.Swap(&b);
  }
  inline void Swap(Order* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Order* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Order* New() const final {
    return CreateMaybeMessage<Order>(nullptr);
  }

  Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Order>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Order* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ecommerce.Order";
  }
  protected:
  explicit Order(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_order_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kIdFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kDestinationFieldNumber = 5,
    kPriceFieldNumber = 4,
  };
  // repeated string items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  const std::string& items(int index) const;
  std::string* mutable_items(int index);
  void set_items(int index, const std::string& value);
  void set_items(int index, std::string&& value);
  void set_items(int index, const char* value);
  void set_items(int index, const char* value, size_t size);
  std::string* add_items();
  void add_items(const std::string& value);
  void add_items(std::string&& value);
  void add_items(const char* value);
  void add_items(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_items();
  private:
  const std::string& _internal_items(int index) const;
  std::string* _internal_add_items();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string destination = 5;
  void clear_destination();
  const std::string& destination() const;
  void set_destination(const std::string& value);
  void set_destination(std::string&& value);
  void set_destination(const char* value);
  void set_destination(const char* value, size_t size);
  std::string* mutable_destination();
  std::string* release_destination();
  void set_allocated_destination(std::string* destination);
  private:
  const std::string& _internal_destination() const;
  void _internal_set_destination(const std::string& value);
  std::string* _internal_mutable_destination();
  public:

  // float price = 4;
  void clear_price();
  float price() const;
  void set_price(float value);
  private:
  float _internal_price() const;
  void _internal_set_price(float value);
  public:

  // @@protoc_insertion_point(class_scope:ecommerce.Order)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_;
  float price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CombinedShipment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ecommerce.CombinedShipment) */ {
 public:
  inline CombinedShipment() : CombinedShipment(nullptr) {}
  virtual ~CombinedShipment();
  explicit constexpr CombinedShipment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CombinedShipment(const CombinedShipment& from);
  CombinedShipment(CombinedShipment&& from) noexcept
    : CombinedShipment() {
    *this = ::std::move(from);
  }

  inline CombinedShipment& operator=(const CombinedShipment& from) {
    CopyFrom(from);
    return *this;
  }
  inline CombinedShipment& operator=(CombinedShipment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CombinedShipment& default_instance() {
    return *internal_default_instance();
  }
  static inline const CombinedShipment* internal_default_instance() {
    return reinterpret_cast<const CombinedShipment*>(
               &_CombinedShipment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CombinedShipment& a, CombinedShipment& b) {
    a.Swap(&b);
  }
  inline void Swap(CombinedShipment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CombinedShipment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CombinedShipment* New() const final {
    return CreateMaybeMessage<CombinedShipment>(nullptr);
  }

  CombinedShipment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CombinedShipment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CombinedShipment& from);
  void MergeFrom(const CombinedShipment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CombinedShipment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ecommerce.CombinedShipment";
  }
  protected:
  explicit CombinedShipment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_order_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersListFieldNumber = 3,
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // repeated .ecommerce.Order ordersList = 3;
  int orderslist_size() const;
  private:
  int _internal_orderslist_size() const;
  public:
  void clear_orderslist();
  ::ecommerce::Order* mutable_orderslist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ecommerce::Order >*
      mutable_orderslist();
  private:
  const ::ecommerce::Order& _internal_orderslist(int index) const;
  ::ecommerce::Order* _internal_add_orderslist();
  public:
  const ::ecommerce::Order& orderslist(int index) const;
  ::ecommerce::Order* add_orderslist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ecommerce::Order >&
      orderslist() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string status = 2;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:ecommerce.CombinedShipment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ecommerce::Order > orderslist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_order_5fmanagement_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Order

// string id = 1;
inline void Order::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Order::id() const {
  // @@protoc_insertion_point(field_get:ecommerce.Order.id)
  return _internal_id();
}
inline void Order::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ecommerce.Order.id)
}
inline std::string* Order::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ecommerce.Order.id)
  return _internal_mutable_id();
}
inline const std::string& Order::_internal_id() const {
  return id_.Get();
}
inline void Order::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Order::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ecommerce.Order.id)
}
inline void Order::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ecommerce.Order.id)
}
inline void Order::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ecommerce.Order.id)
}
inline std::string* Order::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Order::release_id() {
  // @@protoc_insertion_point(field_release:ecommerce.Order.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ecommerce.Order.id)
}

// repeated string items = 2;
inline int Order::_internal_items_size() const {
  return items_.size();
}
inline int Order::items_size() const {
  return _internal_items_size();
}
inline void Order::clear_items() {
  items_.Clear();
}
inline std::string* Order::add_items() {
  // @@protoc_insertion_point(field_add_mutable:ecommerce.Order.items)
  return _internal_add_items();
}
inline const std::string& Order::_internal_items(int index) const {
  return items_.Get(index);
}
inline const std::string& Order::items(int index) const {
  // @@protoc_insertion_point(field_get:ecommerce.Order.items)
  return _internal_items(index);
}
inline std::string* Order::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ecommerce.Order.items)
  return items_.Mutable(index);
}
inline void Order::set_items(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ecommerce.Order.items)
  items_.Mutable(index)->assign(value);
}
inline void Order::set_items(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ecommerce.Order.items)
  items_.Mutable(index)->assign(std::move(value));
}
inline void Order::set_items(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ecommerce.Order.items)
}
inline void Order::set_items(int index, const char* value, size_t size) {
  items_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ecommerce.Order.items)
}
inline std::string* Order::_internal_add_items() {
  return items_.Add();
}
inline void Order::add_items(const std::string& value) {
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ecommerce.Order.items)
}
inline void Order::add_items(std::string&& value) {
  items_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ecommerce.Order.items)
}
inline void Order::add_items(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ecommerce.Order.items)
}
inline void Order::add_items(const char* value, size_t size) {
  items_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ecommerce.Order.items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Order::items() const {
  // @@protoc_insertion_point(field_list:ecommerce.Order.items)
  return items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Order::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ecommerce.Order.items)
  return &items_;
}

// string description = 3;
inline void Order::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Order::description() const {
  // @@protoc_insertion_point(field_get:ecommerce.Order.description)
  return _internal_description();
}
inline void Order::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:ecommerce.Order.description)
}
inline std::string* Order::mutable_description() {
  // @@protoc_insertion_point(field_mutable:ecommerce.Order.description)
  return _internal_mutable_description();
}
inline const std::string& Order::_internal_description() const {
  return description_.Get();
}
inline void Order::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Order::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ecommerce.Order.description)
}
inline void Order::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ecommerce.Order.description)
}
inline void Order::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ecommerce.Order.description)
}
inline std::string* Order::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Order::release_description() {
  // @@protoc_insertion_point(field_release:ecommerce.Order.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ecommerce.Order.description)
}

// float price = 4;
inline void Order::clear_price() {
  price_ = 0;
}
inline float Order::_internal_price() const {
  return price_;
}
inline float Order::price() const {
  // @@protoc_insertion_point(field_get:ecommerce.Order.price)
  return _internal_price();
}
inline void Order::_internal_set_price(float value) {
  
  price_ = value;
}
inline void Order::set_price(float value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:ecommerce.Order.price)
}

// string destination = 5;
inline void Order::clear_destination() {
  destination_.ClearToEmpty();
}
inline const std::string& Order::destination() const {
  // @@protoc_insertion_point(field_get:ecommerce.Order.destination)
  return _internal_destination();
}
inline void Order::set_destination(const std::string& value) {
  _internal_set_destination(value);
  // @@protoc_insertion_point(field_set:ecommerce.Order.destination)
}
inline std::string* Order::mutable_destination() {
  // @@protoc_insertion_point(field_mutable:ecommerce.Order.destination)
  return _internal_mutable_destination();
}
inline const std::string& Order::_internal_destination() const {
  return destination_.Get();
}
inline void Order::_internal_set_destination(const std::string& value) {
  
  destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Order::set_destination(std::string&& value) {
  
  destination_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ecommerce.Order.destination)
}
inline void Order::set_destination(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ecommerce.Order.destination)
}
inline void Order::set_destination(const char* value,
    size_t size) {
  
  destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ecommerce.Order.destination)
}
inline std::string* Order::_internal_mutable_destination() {
  
  return destination_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Order::release_destination() {
  // @@protoc_insertion_point(field_release:ecommerce.Order.destination)
  return destination_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Order::set_allocated_destination(std::string* destination) {
  if (destination != nullptr) {
    
  } else {
    
  }
  destination_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destination,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ecommerce.Order.destination)
}

// -------------------------------------------------------------------

// CombinedShipment

// string id = 1;
inline void CombinedShipment::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& CombinedShipment::id() const {
  // @@protoc_insertion_point(field_get:ecommerce.CombinedShipment.id)
  return _internal_id();
}
inline void CombinedShipment::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ecommerce.CombinedShipment.id)
}
inline std::string* CombinedShipment::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ecommerce.CombinedShipment.id)
  return _internal_mutable_id();
}
inline const std::string& CombinedShipment::_internal_id() const {
  return id_.Get();
}
inline void CombinedShipment::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CombinedShipment::set_id(std::string&& value) {
  
  id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ecommerce.CombinedShipment.id)
}
inline void CombinedShipment::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ecommerce.CombinedShipment.id)
}
inline void CombinedShipment::set_id(const char* value,
    size_t size) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ecommerce.CombinedShipment.id)
}
inline std::string* CombinedShipment::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CombinedShipment::release_id() {
  // @@protoc_insertion_point(field_release:ecommerce.CombinedShipment.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CombinedShipment::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ecommerce.CombinedShipment.id)
}

// string status = 2;
inline void CombinedShipment::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& CombinedShipment::status() const {
  // @@protoc_insertion_point(field_get:ecommerce.CombinedShipment.status)
  return _internal_status();
}
inline void CombinedShipment::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ecommerce.CombinedShipment.status)
}
inline std::string* CombinedShipment::mutable_status() {
  // @@protoc_insertion_point(field_mutable:ecommerce.CombinedShipment.status)
  return _internal_mutable_status();
}
inline const std::string& CombinedShipment::_internal_status() const {
  return status_.Get();
}
inline void CombinedShipment::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CombinedShipment::set_status(std::string&& value) {
  
  status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ecommerce.CombinedShipment.status)
}
inline void CombinedShipment::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ecommerce.CombinedShipment.status)
}
inline void CombinedShipment::set_status(const char* value,
    size_t size) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ecommerce.CombinedShipment.status)
}
inline std::string* CombinedShipment::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CombinedShipment::release_status() {
  // @@protoc_insertion_point(field_release:ecommerce.CombinedShipment.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CombinedShipment::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ecommerce.CombinedShipment.status)
}

// repeated .ecommerce.Order ordersList = 3;
inline int CombinedShipment::_internal_orderslist_size() const {
  return orderslist_.size();
}
inline int CombinedShipment::orderslist_size() const {
  return _internal_orderslist_size();
}
inline void CombinedShipment::clear_orderslist() {
  orderslist_.Clear();
}
inline ::ecommerce::Order* CombinedShipment::mutable_orderslist(int index) {
  // @@protoc_insertion_point(field_mutable:ecommerce.CombinedShipment.ordersList)
  return orderslist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ecommerce::Order >*
CombinedShipment::mutable_orderslist() {
  // @@protoc_insertion_point(field_mutable_list:ecommerce.CombinedShipment.ordersList)
  return &orderslist_;
}
inline const ::ecommerce::Order& CombinedShipment::_internal_orderslist(int index) const {
  return orderslist_.Get(index);
}
inline const ::ecommerce::Order& CombinedShipment::orderslist(int index) const {
  // @@protoc_insertion_point(field_get:ecommerce.CombinedShipment.ordersList)
  return _internal_orderslist(index);
}
inline ::ecommerce::Order* CombinedShipment::_internal_add_orderslist() {
  return orderslist_.Add();
}
inline ::ecommerce::Order* CombinedShipment::add_orderslist() {
  // @@protoc_insertion_point(field_add:ecommerce.CombinedShipment.ordersList)
  return _internal_add_orderslist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ecommerce::Order >&
CombinedShipment::orderslist() const {
  // @@protoc_insertion_point(field_list:ecommerce.CombinedShipment.ordersList)
  return orderslist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ecommerce

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_order_5fmanagement_2eproto
