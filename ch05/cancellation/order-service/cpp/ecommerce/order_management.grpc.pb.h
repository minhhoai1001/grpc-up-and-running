// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: order_management.proto
#ifndef GRPC_order_5fmanagement_2eproto__INCLUDED
#define GRPC_order_5fmanagement_2eproto__INCLUDED

#include "order_management.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace ecommerce {

class OrderManagement final {
 public:
  static constexpr char const* service_full_name() {
    return "ecommerce.OrderManagement";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status addOrder(::grpc::ClientContext* context, const ::ecommerce::Order& request, ::google::protobuf::StringValue* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::StringValue>> AsyncaddOrder(::grpc::ClientContext* context, const ::ecommerce::Order& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::StringValue>>(AsyncaddOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::StringValue>> PrepareAsyncaddOrder(::grpc::ClientContext* context, const ::ecommerce::Order& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::StringValue>>(PrepareAsyncaddOrderRaw(context, request, cq));
    }
    virtual ::grpc::Status getOrder(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::ecommerce::Order* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecommerce::Order>> AsyncgetOrder(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecommerce::Order>>(AsyncgetOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecommerce::Order>> PrepareAsyncgetOrder(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ecommerce::Order>>(PrepareAsyncgetOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::ecommerce::Order>> searchOrders(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::ecommerce::Order>>(searchOrdersRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ecommerce::Order>> AsyncsearchOrders(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ecommerce::Order>>(AsyncsearchOrdersRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ecommerce::Order>> PrepareAsyncsearchOrders(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::ecommerce::Order>>(PrepareAsyncsearchOrdersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::ecommerce::Order>> updateOrders(::grpc::ClientContext* context, ::google::protobuf::StringValue* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::ecommerce::Order>>(updateOrdersRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ecommerce::Order>> AsyncupdateOrders(::grpc::ClientContext* context, ::google::protobuf::StringValue* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ecommerce::Order>>(AsyncupdateOrdersRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ecommerce::Order>> PrepareAsyncupdateOrders(::grpc::ClientContext* context, ::google::protobuf::StringValue* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::ecommerce::Order>>(PrepareAsyncupdateOrdersRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::google::protobuf::StringValue, ::ecommerce::CombinedShipment>> processOrders(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::google::protobuf::StringValue, ::ecommerce::CombinedShipment>>(processOrdersRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::StringValue, ::ecommerce::CombinedShipment>> AsyncprocessOrders(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::StringValue, ::ecommerce::CombinedShipment>>(AsyncprocessOrdersRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::StringValue, ::ecommerce::CombinedShipment>> PrepareAsyncprocessOrders(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::StringValue, ::ecommerce::CombinedShipment>>(PrepareAsyncprocessOrdersRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void addOrder(::grpc::ClientContext* context, const ::ecommerce::Order* request, ::google::protobuf::StringValue* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void addOrder(::grpc::ClientContext* context, const ::ecommerce::Order* request, ::google::protobuf::StringValue* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void addOrder(::grpc::ClientContext* context, const ::ecommerce::Order* request, ::google::protobuf::StringValue* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void getOrder(::grpc::ClientContext* context, const ::google::protobuf::StringValue* request, ::ecommerce::Order* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getOrder(::grpc::ClientContext* context, const ::google::protobuf::StringValue* request, ::ecommerce::Order* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getOrder(::grpc::ClientContext* context, const ::google::protobuf::StringValue* request, ::ecommerce::Order* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void searchOrders(::grpc::ClientContext* context, const ::google::protobuf::StringValue* request, ::grpc::ClientReadReactor< ::ecommerce::Order>* reactor) = 0;
      #else
      virtual void searchOrders(::grpc::ClientContext* context, const ::google::protobuf::StringValue* request, ::grpc::experimental::ClientReadReactor< ::ecommerce::Order>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void updateOrders(::grpc::ClientContext* context, ::google::protobuf::StringValue* response, ::grpc::ClientWriteReactor< ::ecommerce::Order>* reactor) = 0;
      #else
      virtual void updateOrders(::grpc::ClientContext* context, ::google::protobuf::StringValue* response, ::grpc::experimental::ClientWriteReactor< ::ecommerce::Order>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void processOrders(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::google::protobuf::StringValue,::ecommerce::CombinedShipment>* reactor) = 0;
      #else
      virtual void processOrders(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::google::protobuf::StringValue,::ecommerce::CombinedShipment>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::StringValue>* AsyncaddOrderRaw(::grpc::ClientContext* context, const ::ecommerce::Order& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::StringValue>* PrepareAsyncaddOrderRaw(::grpc::ClientContext* context, const ::ecommerce::Order& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ecommerce::Order>* AsyncgetOrderRaw(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ecommerce::Order>* PrepareAsyncgetOrderRaw(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::ecommerce::Order>* searchOrdersRaw(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ecommerce::Order>* AsyncsearchOrdersRaw(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::ecommerce::Order>* PrepareAsyncsearchOrdersRaw(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::ecommerce::Order>* updateOrdersRaw(::grpc::ClientContext* context, ::google::protobuf::StringValue* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::ecommerce::Order>* AsyncupdateOrdersRaw(::grpc::ClientContext* context, ::google::protobuf::StringValue* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::ecommerce::Order>* PrepareAsyncupdateOrdersRaw(::grpc::ClientContext* context, ::google::protobuf::StringValue* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::google::protobuf::StringValue, ::ecommerce::CombinedShipment>* processOrdersRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::StringValue, ::ecommerce::CombinedShipment>* AsyncprocessOrdersRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::google::protobuf::StringValue, ::ecommerce::CombinedShipment>* PrepareAsyncprocessOrdersRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status addOrder(::grpc::ClientContext* context, const ::ecommerce::Order& request, ::google::protobuf::StringValue* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::StringValue>> AsyncaddOrder(::grpc::ClientContext* context, const ::ecommerce::Order& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::StringValue>>(AsyncaddOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::StringValue>> PrepareAsyncaddOrder(::grpc::ClientContext* context, const ::ecommerce::Order& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::StringValue>>(PrepareAsyncaddOrderRaw(context, request, cq));
    }
    ::grpc::Status getOrder(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::ecommerce::Order* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecommerce::Order>> AsyncgetOrder(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecommerce::Order>>(AsyncgetOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecommerce::Order>> PrepareAsyncgetOrder(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ecommerce::Order>>(PrepareAsyncgetOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::ecommerce::Order>> searchOrders(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::ecommerce::Order>>(searchOrdersRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ecommerce::Order>> AsyncsearchOrders(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ecommerce::Order>>(AsyncsearchOrdersRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::ecommerce::Order>> PrepareAsyncsearchOrders(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::ecommerce::Order>>(PrepareAsyncsearchOrdersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::ecommerce::Order>> updateOrders(::grpc::ClientContext* context, ::google::protobuf::StringValue* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::ecommerce::Order>>(updateOrdersRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::ecommerce::Order>> AsyncupdateOrders(::grpc::ClientContext* context, ::google::protobuf::StringValue* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::ecommerce::Order>>(AsyncupdateOrdersRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::ecommerce::Order>> PrepareAsyncupdateOrders(::grpc::ClientContext* context, ::google::protobuf::StringValue* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::ecommerce::Order>>(PrepareAsyncupdateOrdersRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::google::protobuf::StringValue, ::ecommerce::CombinedShipment>> processOrders(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::google::protobuf::StringValue, ::ecommerce::CombinedShipment>>(processOrdersRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::google::protobuf::StringValue, ::ecommerce::CombinedShipment>> AsyncprocessOrders(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::google::protobuf::StringValue, ::ecommerce::CombinedShipment>>(AsyncprocessOrdersRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::google::protobuf::StringValue, ::ecommerce::CombinedShipment>> PrepareAsyncprocessOrders(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::google::protobuf::StringValue, ::ecommerce::CombinedShipment>>(PrepareAsyncprocessOrdersRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void addOrder(::grpc::ClientContext* context, const ::ecommerce::Order* request, ::google::protobuf::StringValue* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void addOrder(::grpc::ClientContext* context, const ::ecommerce::Order* request, ::google::protobuf::StringValue* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void addOrder(::grpc::ClientContext* context, const ::ecommerce::Order* request, ::google::protobuf::StringValue* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void getOrder(::grpc::ClientContext* context, const ::google::protobuf::StringValue* request, ::ecommerce::Order* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getOrder(::grpc::ClientContext* context, const ::google::protobuf::StringValue* request, ::ecommerce::Order* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getOrder(::grpc::ClientContext* context, const ::google::protobuf::StringValue* request, ::ecommerce::Order* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void searchOrders(::grpc::ClientContext* context, const ::google::protobuf::StringValue* request, ::grpc::ClientReadReactor< ::ecommerce::Order>* reactor) override;
      #else
      void searchOrders(::grpc::ClientContext* context, const ::google::protobuf::StringValue* request, ::grpc::experimental::ClientReadReactor< ::ecommerce::Order>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void updateOrders(::grpc::ClientContext* context, ::google::protobuf::StringValue* response, ::grpc::ClientWriteReactor< ::ecommerce::Order>* reactor) override;
      #else
      void updateOrders(::grpc::ClientContext* context, ::google::protobuf::StringValue* response, ::grpc::experimental::ClientWriteReactor< ::ecommerce::Order>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void processOrders(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::google::protobuf::StringValue,::ecommerce::CombinedShipment>* reactor) override;
      #else
      void processOrders(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::google::protobuf::StringValue,::ecommerce::CombinedShipment>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::StringValue>* AsyncaddOrderRaw(::grpc::ClientContext* context, const ::ecommerce::Order& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::StringValue>* PrepareAsyncaddOrderRaw(::grpc::ClientContext* context, const ::ecommerce::Order& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ecommerce::Order>* AsyncgetOrderRaw(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ecommerce::Order>* PrepareAsyncgetOrderRaw(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::ecommerce::Order>* searchOrdersRaw(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request) override;
    ::grpc::ClientAsyncReader< ::ecommerce::Order>* AsyncsearchOrdersRaw(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::ecommerce::Order>* PrepareAsyncsearchOrdersRaw(::grpc::ClientContext* context, const ::google::protobuf::StringValue& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::ecommerce::Order>* updateOrdersRaw(::grpc::ClientContext* context, ::google::protobuf::StringValue* response) override;
    ::grpc::ClientAsyncWriter< ::ecommerce::Order>* AsyncupdateOrdersRaw(::grpc::ClientContext* context, ::google::protobuf::StringValue* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::ecommerce::Order>* PrepareAsyncupdateOrdersRaw(::grpc::ClientContext* context, ::google::protobuf::StringValue* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::google::protobuf::StringValue, ::ecommerce::CombinedShipment>* processOrdersRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::google::protobuf::StringValue, ::ecommerce::CombinedShipment>* AsyncprocessOrdersRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::google::protobuf::StringValue, ::ecommerce::CombinedShipment>* PrepareAsyncprocessOrdersRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_addOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_getOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_searchOrders_;
    const ::grpc::internal::RpcMethod rpcmethod_updateOrders_;
    const ::grpc::internal::RpcMethod rpcmethod_processOrders_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status addOrder(::grpc::ServerContext* context, const ::ecommerce::Order* request, ::google::protobuf::StringValue* response);
    virtual ::grpc::Status getOrder(::grpc::ServerContext* context, const ::google::protobuf::StringValue* request, ::ecommerce::Order* response);
    virtual ::grpc::Status searchOrders(::grpc::ServerContext* context, const ::google::protobuf::StringValue* request, ::grpc::ServerWriter< ::ecommerce::Order>* writer);
    virtual ::grpc::Status updateOrders(::grpc::ServerContext* context, ::grpc::ServerReader< ::ecommerce::Order>* reader, ::google::protobuf::StringValue* response);
    virtual ::grpc::Status processOrders(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::ecommerce::CombinedShipment, ::google::protobuf::StringValue>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_addOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_addOrder() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_addOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addOrder(::grpc::ServerContext* /*context*/, const ::ecommerce::Order* /*request*/, ::google::protobuf::StringValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddOrder(::grpc::ServerContext* context, ::ecommerce::Order* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::StringValue>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getOrder() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_getOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getOrder(::grpc::ServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::ecommerce::Order* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetOrder(::grpc::ServerContext* context, ::google::protobuf::StringValue* request, ::grpc::ServerAsyncResponseWriter< ::ecommerce::Order>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_searchOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_searchOrders() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_searchOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchOrders(::grpc::ServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::grpc::ServerWriter< ::ecommerce::Order>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsearchOrders(::grpc::ServerContext* context, ::google::protobuf::StringValue* request, ::grpc::ServerAsyncWriter< ::ecommerce::Order>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_updateOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_updateOrders() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_updateOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateOrders(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ecommerce::Order>* /*reader*/, ::google::protobuf::StringValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateOrders(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::google::protobuf::StringValue, ::ecommerce::Order>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(3, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_processOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_processOrders() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_processOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status processOrders(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ecommerce::CombinedShipment, ::google::protobuf::StringValue>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestprocessOrders(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::ecommerce::CombinedShipment, ::google::protobuf::StringValue>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_addOrder<WithAsyncMethod_getOrder<WithAsyncMethod_searchOrders<WithAsyncMethod_updateOrders<WithAsyncMethod_processOrders<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_addOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_addOrder() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ecommerce::Order, ::google::protobuf::StringValue>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::ecommerce::Order* request, ::google::protobuf::StringValue* response) { return this->addOrder(context, request, response); }));}
    void SetMessageAllocatorFor_addOrder(
        ::grpc::experimental::MessageAllocator< ::ecommerce::Order, ::google::protobuf::StringValue>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ecommerce::Order, ::google::protobuf::StringValue>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_addOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addOrder(::grpc::ServerContext* /*context*/, const ::ecommerce::Order* /*request*/, ::google::protobuf::StringValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* addOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::ecommerce::Order* /*request*/, ::google::protobuf::StringValue* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* addOrder(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::ecommerce::Order* /*request*/, ::google::protobuf::StringValue* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getOrder() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::StringValue, ::ecommerce::Order>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::StringValue* request, ::ecommerce::Order* response) { return this->getOrder(context, request, response); }));}
    void SetMessageAllocatorFor_getOrder(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::StringValue, ::ecommerce::Order>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::StringValue, ::ecommerce::Order>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getOrder(::grpc::ServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::ecommerce::Order* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::ecommerce::Order* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getOrder(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::ecommerce::Order* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_searchOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_searchOrders() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::google::protobuf::StringValue, ::ecommerce::Order>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::StringValue* request) { return this->searchOrders(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_searchOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchOrders(::grpc::ServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::grpc::ServerWriter< ::ecommerce::Order>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::ecommerce::Order>* searchOrders(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::ecommerce::Order>* searchOrders(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_updateOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_updateOrders() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackClientStreamingHandler< ::ecommerce::Order, ::google::protobuf::StringValue>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::google::protobuf::StringValue* response) { return this->updateOrders(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_updateOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateOrders(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ecommerce::Order>* /*reader*/, ::google::protobuf::StringValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::ecommerce::Order>* updateOrders(
      ::grpc::CallbackServerContext* /*context*/, ::google::protobuf::StringValue* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::ecommerce::Order>* updateOrders(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::google::protobuf::StringValue* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_processOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_processOrders() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackBidiHandler< ::google::protobuf::StringValue, ::ecommerce::CombinedShipment>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->processOrders(context); }));
    }
    ~ExperimentalWithCallbackMethod_processOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status processOrders(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ecommerce::CombinedShipment, ::google::protobuf::StringValue>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::google::protobuf::StringValue, ::ecommerce::CombinedShipment>* processOrders(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::google::protobuf::StringValue, ::ecommerce::CombinedShipment>* processOrders(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_addOrder<ExperimentalWithCallbackMethod_getOrder<ExperimentalWithCallbackMethod_searchOrders<ExperimentalWithCallbackMethod_updateOrders<ExperimentalWithCallbackMethod_processOrders<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_addOrder<ExperimentalWithCallbackMethod_getOrder<ExperimentalWithCallbackMethod_searchOrders<ExperimentalWithCallbackMethod_updateOrders<ExperimentalWithCallbackMethod_processOrders<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_addOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_addOrder() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_addOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addOrder(::grpc::ServerContext* /*context*/, const ::ecommerce::Order* /*request*/, ::google::protobuf::StringValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getOrder() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_getOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getOrder(::grpc::ServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::ecommerce::Order* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_searchOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_searchOrders() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_searchOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchOrders(::grpc::ServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::grpc::ServerWriter< ::ecommerce::Order>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_updateOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_updateOrders() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_updateOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateOrders(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ecommerce::Order>* /*reader*/, ::google::protobuf::StringValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_processOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_processOrders() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_processOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status processOrders(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ecommerce::CombinedShipment, ::google::protobuf::StringValue>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_addOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_addOrder() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_addOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addOrder(::grpc::ServerContext* /*context*/, const ::ecommerce::Order* /*request*/, ::google::protobuf::StringValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getOrder() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_getOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getOrder(::grpc::ServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::ecommerce::Order* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_searchOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_searchOrders() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_searchOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchOrders(::grpc::ServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::grpc::ServerWriter< ::ecommerce::Order>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsearchOrders(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_updateOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_updateOrders() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_updateOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateOrders(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ecommerce::Order>* /*reader*/, ::google::protobuf::StringValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdateOrders(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(3, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_processOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_processOrders() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_processOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status processOrders(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ecommerce::CombinedShipment, ::google::protobuf::StringValue>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestprocessOrders(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_addOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_addOrder() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->addOrder(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_addOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addOrder(::grpc::ServerContext* /*context*/, const ::ecommerce::Order* /*request*/, ::google::protobuf::StringValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* addOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* addOrder(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getOrder() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getOrder(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getOrder(::grpc::ServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::ecommerce::Order* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getOrder(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_searchOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_searchOrders() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->searchOrders(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_searchOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchOrders(::grpc::ServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::grpc::ServerWriter< ::ecommerce::Order>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* searchOrders(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* searchOrders(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_updateOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_updateOrders() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->updateOrders(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_updateOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updateOrders(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::ecommerce::Order>* /*reader*/, ::google::protobuf::StringValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* updateOrders(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* updateOrders(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_processOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_processOrders() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->processOrders(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_processOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status processOrders(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::ecommerce::CombinedShipment, ::google::protobuf::StringValue>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* processOrders(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* processOrders(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_addOrder() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ecommerce::Order, ::google::protobuf::StringValue>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ecommerce::Order, ::google::protobuf::StringValue>* streamer) {
                       return this->StreamedaddOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_addOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addOrder(::grpc::ServerContext* /*context*/, const ::ecommerce::Order* /*request*/, ::google::protobuf::StringValue* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ecommerce::Order,::google::protobuf::StringValue>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getOrder() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::StringValue, ::ecommerce::Order>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::StringValue, ::ecommerce::Order>* streamer) {
                       return this->StreamedgetOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getOrder(::grpc::ServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::ecommerce::Order* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::StringValue,::ecommerce::Order>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_addOrder<WithStreamedUnaryMethod_getOrder<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_searchOrders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_searchOrders() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::google::protobuf::StringValue, ::ecommerce::Order>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::google::protobuf::StringValue, ::ecommerce::Order>* streamer) {
                       return this->StreamedsearchOrders(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_searchOrders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status searchOrders(::grpc::ServerContext* /*context*/, const ::google::protobuf::StringValue* /*request*/, ::grpc::ServerWriter< ::ecommerce::Order>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedsearchOrders(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::google::protobuf::StringValue,::ecommerce::Order>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_searchOrders<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_addOrder<WithStreamedUnaryMethod_getOrder<WithSplitStreamingMethod_searchOrders<Service > > > StreamedService;
};

}  // namespace ecommerce


#endif  // GRPC_order_5fmanagement_2eproto__INCLUDED
