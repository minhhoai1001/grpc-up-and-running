// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: echo.proto
// Original file comments:
//
//
// Copyright 2018 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
#ifndef GRPC_echo_2eproto__INCLUDED
#define GRPC_echo_2eproto__INCLUDED

#include "echo.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace echo {

// Echo is the echo service.
class Echo final {
 public:
  static constexpr char const* service_full_name() {
    return "echo.Echo";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // UnaryEcho is unary echo.
    virtual ::grpc::Status UnaryEcho(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::echo::EchoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::echo::EchoResponse>> AsyncUnaryEcho(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::echo::EchoResponse>>(AsyncUnaryEchoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::echo::EchoResponse>> PrepareAsyncUnaryEcho(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::echo::EchoResponse>>(PrepareAsyncUnaryEchoRaw(context, request, cq));
    }
    // ServerStreamingEcho is server side streaming.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::echo::EchoResponse>> ServerStreamingEcho(::grpc::ClientContext* context, const ::echo::EchoRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::echo::EchoResponse>>(ServerStreamingEchoRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::echo::EchoResponse>> AsyncServerStreamingEcho(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::echo::EchoResponse>>(AsyncServerStreamingEchoRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::echo::EchoResponse>> PrepareAsyncServerStreamingEcho(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::echo::EchoResponse>>(PrepareAsyncServerStreamingEchoRaw(context, request, cq));
    }
    // ClientStreamingEcho is client side streaming.
    std::unique_ptr< ::grpc::ClientWriterInterface< ::echo::EchoRequest>> ClientStreamingEcho(::grpc::ClientContext* context, ::echo::EchoResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::echo::EchoRequest>>(ClientStreamingEchoRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::echo::EchoRequest>> AsyncClientStreamingEcho(::grpc::ClientContext* context, ::echo::EchoResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::echo::EchoRequest>>(AsyncClientStreamingEchoRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::echo::EchoRequest>> PrepareAsyncClientStreamingEcho(::grpc::ClientContext* context, ::echo::EchoResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::echo::EchoRequest>>(PrepareAsyncClientStreamingEchoRaw(context, response, cq));
    }
    // BidirectionalStreamingEcho is bidi streaming.
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::echo::EchoRequest, ::echo::EchoResponse>> BidirectionalStreamingEcho(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::echo::EchoRequest, ::echo::EchoResponse>>(BidirectionalStreamingEchoRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::echo::EchoRequest, ::echo::EchoResponse>> AsyncBidirectionalStreamingEcho(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::echo::EchoRequest, ::echo::EchoResponse>>(AsyncBidirectionalStreamingEchoRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::echo::EchoRequest, ::echo::EchoResponse>> PrepareAsyncBidirectionalStreamingEcho(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::echo::EchoRequest, ::echo::EchoResponse>>(PrepareAsyncBidirectionalStreamingEchoRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // UnaryEcho is unary echo.
      virtual void UnaryEcho(::grpc::ClientContext* context, const ::echo::EchoRequest* request, ::echo::EchoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UnaryEcho(::grpc::ClientContext* context, const ::echo::EchoRequest* request, ::echo::EchoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ServerStreamingEcho is server side streaming.
      virtual void ServerStreamingEcho(::grpc::ClientContext* context, const ::echo::EchoRequest* request, ::grpc::ClientReadReactor< ::echo::EchoResponse>* reactor) = 0;
      // ClientStreamingEcho is client side streaming.
      virtual void ClientStreamingEcho(::grpc::ClientContext* context, ::echo::EchoResponse* response, ::grpc::ClientWriteReactor< ::echo::EchoRequest>* reactor) = 0;
      // BidirectionalStreamingEcho is bidi streaming.
      virtual void BidirectionalStreamingEcho(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::echo::EchoRequest,::echo::EchoResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::echo::EchoResponse>* AsyncUnaryEchoRaw(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::echo::EchoResponse>* PrepareAsyncUnaryEchoRaw(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::echo::EchoResponse>* ServerStreamingEchoRaw(::grpc::ClientContext* context, const ::echo::EchoRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::echo::EchoResponse>* AsyncServerStreamingEchoRaw(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::echo::EchoResponse>* PrepareAsyncServerStreamingEchoRaw(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::echo::EchoRequest>* ClientStreamingEchoRaw(::grpc::ClientContext* context, ::echo::EchoResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::echo::EchoRequest>* AsyncClientStreamingEchoRaw(::grpc::ClientContext* context, ::echo::EchoResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::echo::EchoRequest>* PrepareAsyncClientStreamingEchoRaw(::grpc::ClientContext* context, ::echo::EchoResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::echo::EchoRequest, ::echo::EchoResponse>* BidirectionalStreamingEchoRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::echo::EchoRequest, ::echo::EchoResponse>* AsyncBidirectionalStreamingEchoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::echo::EchoRequest, ::echo::EchoResponse>* PrepareAsyncBidirectionalStreamingEchoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status UnaryEcho(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::echo::EchoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::echo::EchoResponse>> AsyncUnaryEcho(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::echo::EchoResponse>>(AsyncUnaryEchoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::echo::EchoResponse>> PrepareAsyncUnaryEcho(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::echo::EchoResponse>>(PrepareAsyncUnaryEchoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::echo::EchoResponse>> ServerStreamingEcho(::grpc::ClientContext* context, const ::echo::EchoRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::echo::EchoResponse>>(ServerStreamingEchoRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::echo::EchoResponse>> AsyncServerStreamingEcho(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::echo::EchoResponse>>(AsyncServerStreamingEchoRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::echo::EchoResponse>> PrepareAsyncServerStreamingEcho(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::echo::EchoResponse>>(PrepareAsyncServerStreamingEchoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::echo::EchoRequest>> ClientStreamingEcho(::grpc::ClientContext* context, ::echo::EchoResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::echo::EchoRequest>>(ClientStreamingEchoRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::echo::EchoRequest>> AsyncClientStreamingEcho(::grpc::ClientContext* context, ::echo::EchoResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::echo::EchoRequest>>(AsyncClientStreamingEchoRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::echo::EchoRequest>> PrepareAsyncClientStreamingEcho(::grpc::ClientContext* context, ::echo::EchoResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::echo::EchoRequest>>(PrepareAsyncClientStreamingEchoRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::echo::EchoRequest, ::echo::EchoResponse>> BidirectionalStreamingEcho(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::echo::EchoRequest, ::echo::EchoResponse>>(BidirectionalStreamingEchoRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::echo::EchoRequest, ::echo::EchoResponse>> AsyncBidirectionalStreamingEcho(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::echo::EchoRequest, ::echo::EchoResponse>>(AsyncBidirectionalStreamingEchoRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::echo::EchoRequest, ::echo::EchoResponse>> PrepareAsyncBidirectionalStreamingEcho(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::echo::EchoRequest, ::echo::EchoResponse>>(PrepareAsyncBidirectionalStreamingEchoRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void UnaryEcho(::grpc::ClientContext* context, const ::echo::EchoRequest* request, ::echo::EchoResponse* response, std::function<void(::grpc::Status)>) override;
      void UnaryEcho(::grpc::ClientContext* context, const ::echo::EchoRequest* request, ::echo::EchoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ServerStreamingEcho(::grpc::ClientContext* context, const ::echo::EchoRequest* request, ::grpc::ClientReadReactor< ::echo::EchoResponse>* reactor) override;
      void ClientStreamingEcho(::grpc::ClientContext* context, ::echo::EchoResponse* response, ::grpc::ClientWriteReactor< ::echo::EchoRequest>* reactor) override;
      void BidirectionalStreamingEcho(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::echo::EchoRequest,::echo::EchoResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::echo::EchoResponse>* AsyncUnaryEchoRaw(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::echo::EchoResponse>* PrepareAsyncUnaryEchoRaw(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::echo::EchoResponse>* ServerStreamingEchoRaw(::grpc::ClientContext* context, const ::echo::EchoRequest& request) override;
    ::grpc::ClientAsyncReader< ::echo::EchoResponse>* AsyncServerStreamingEchoRaw(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::echo::EchoResponse>* PrepareAsyncServerStreamingEchoRaw(::grpc::ClientContext* context, const ::echo::EchoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::echo::EchoRequest>* ClientStreamingEchoRaw(::grpc::ClientContext* context, ::echo::EchoResponse* response) override;
    ::grpc::ClientAsyncWriter< ::echo::EchoRequest>* AsyncClientStreamingEchoRaw(::grpc::ClientContext* context, ::echo::EchoResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::echo::EchoRequest>* PrepareAsyncClientStreamingEchoRaw(::grpc::ClientContext* context, ::echo::EchoResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::echo::EchoRequest, ::echo::EchoResponse>* BidirectionalStreamingEchoRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::echo::EchoRequest, ::echo::EchoResponse>* AsyncBidirectionalStreamingEchoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::echo::EchoRequest, ::echo::EchoResponse>* PrepareAsyncBidirectionalStreamingEchoRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_UnaryEcho_;
    const ::grpc::internal::RpcMethod rpcmethod_ServerStreamingEcho_;
    const ::grpc::internal::RpcMethod rpcmethod_ClientStreamingEcho_;
    const ::grpc::internal::RpcMethod rpcmethod_BidirectionalStreamingEcho_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // UnaryEcho is unary echo.
    virtual ::grpc::Status UnaryEcho(::grpc::ServerContext* context, const ::echo::EchoRequest* request, ::echo::EchoResponse* response);
    // ServerStreamingEcho is server side streaming.
    virtual ::grpc::Status ServerStreamingEcho(::grpc::ServerContext* context, const ::echo::EchoRequest* request, ::grpc::ServerWriter< ::echo::EchoResponse>* writer);
    // ClientStreamingEcho is client side streaming.
    virtual ::grpc::Status ClientStreamingEcho(::grpc::ServerContext* context, ::grpc::ServerReader< ::echo::EchoRequest>* reader, ::echo::EchoResponse* response);
    // BidirectionalStreamingEcho is bidi streaming.
    virtual ::grpc::Status BidirectionalStreamingEcho(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::echo::EchoResponse, ::echo::EchoRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_UnaryEcho : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UnaryEcho() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_UnaryEcho() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnaryEcho(::grpc::ServerContext* /*context*/, const ::echo::EchoRequest* /*request*/, ::echo::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnaryEcho(::grpc::ServerContext* context, ::echo::EchoRequest* request, ::grpc::ServerAsyncResponseWriter< ::echo::EchoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerStreamingEcho : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ServerStreamingEcho() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ServerStreamingEcho() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamingEcho(::grpc::ServerContext* /*context*/, const ::echo::EchoRequest* /*request*/, ::grpc::ServerWriter< ::echo::EchoResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerStreamingEcho(::grpc::ServerContext* context, ::echo::EchoRequest* request, ::grpc::ServerAsyncWriter< ::echo::EchoResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ClientStreamingEcho : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ClientStreamingEcho() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ClientStreamingEcho() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStreamingEcho(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::echo::EchoRequest>* /*reader*/, ::echo::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClientStreamingEcho(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::echo::EchoResponse, ::echo::EchoRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BidirectionalStreamingEcho : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BidirectionalStreamingEcho() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_BidirectionalStreamingEcho() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidirectionalStreamingEcho(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::echo::EchoResponse, ::echo::EchoRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBidirectionalStreamingEcho(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::echo::EchoResponse, ::echo::EchoRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_UnaryEcho<WithAsyncMethod_ServerStreamingEcho<WithAsyncMethod_ClientStreamingEcho<WithAsyncMethod_BidirectionalStreamingEcho<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_UnaryEcho : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UnaryEcho() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::echo::EchoRequest, ::echo::EchoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::echo::EchoRequest* request, ::echo::EchoResponse* response) { return this->UnaryEcho(context, request, response); }));}
    void SetMessageAllocatorFor_UnaryEcho(
        ::grpc::MessageAllocator< ::echo::EchoRequest, ::echo::EchoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::echo::EchoRequest, ::echo::EchoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UnaryEcho() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnaryEcho(::grpc::ServerContext* /*context*/, const ::echo::EchoRequest* /*request*/, ::echo::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnaryEcho(
      ::grpc::CallbackServerContext* /*context*/, const ::echo::EchoRequest* /*request*/, ::echo::EchoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ServerStreamingEcho : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ServerStreamingEcho() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::echo::EchoRequest, ::echo::EchoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::echo::EchoRequest* request) { return this->ServerStreamingEcho(context, request); }));
    }
    ~WithCallbackMethod_ServerStreamingEcho() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamingEcho(::grpc::ServerContext* /*context*/, const ::echo::EchoRequest* /*request*/, ::grpc::ServerWriter< ::echo::EchoResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::echo::EchoResponse>* ServerStreamingEcho(
      ::grpc::CallbackServerContext* /*context*/, const ::echo::EchoRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ClientStreamingEcho : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ClientStreamingEcho() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::echo::EchoRequest, ::echo::EchoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, ::echo::EchoResponse* response) { return this->ClientStreamingEcho(context, response); }));
    }
    ~WithCallbackMethod_ClientStreamingEcho() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStreamingEcho(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::echo::EchoRequest>* /*reader*/, ::echo::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::echo::EchoRequest>* ClientStreamingEcho(
      ::grpc::CallbackServerContext* /*context*/, ::echo::EchoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BidirectionalStreamingEcho : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BidirectionalStreamingEcho() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::echo::EchoRequest, ::echo::EchoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->BidirectionalStreamingEcho(context); }));
    }
    ~WithCallbackMethod_BidirectionalStreamingEcho() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidirectionalStreamingEcho(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::echo::EchoResponse, ::echo::EchoRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::echo::EchoRequest, ::echo::EchoResponse>* BidirectionalStreamingEcho(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_UnaryEcho<WithCallbackMethod_ServerStreamingEcho<WithCallbackMethod_ClientStreamingEcho<WithCallbackMethod_BidirectionalStreamingEcho<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_UnaryEcho : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UnaryEcho() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_UnaryEcho() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnaryEcho(::grpc::ServerContext* /*context*/, const ::echo::EchoRequest* /*request*/, ::echo::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerStreamingEcho : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ServerStreamingEcho() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ServerStreamingEcho() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamingEcho(::grpc::ServerContext* /*context*/, const ::echo::EchoRequest* /*request*/, ::grpc::ServerWriter< ::echo::EchoResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ClientStreamingEcho : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ClientStreamingEcho() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ClientStreamingEcho() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStreamingEcho(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::echo::EchoRequest>* /*reader*/, ::echo::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BidirectionalStreamingEcho : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BidirectionalStreamingEcho() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_BidirectionalStreamingEcho() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidirectionalStreamingEcho(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::echo::EchoResponse, ::echo::EchoRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_UnaryEcho : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UnaryEcho() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_UnaryEcho() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnaryEcho(::grpc::ServerContext* /*context*/, const ::echo::EchoRequest* /*request*/, ::echo::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnaryEcho(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ServerStreamingEcho : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ServerStreamingEcho() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ServerStreamingEcho() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamingEcho(::grpc::ServerContext* /*context*/, const ::echo::EchoRequest* /*request*/, ::grpc::ServerWriter< ::echo::EchoResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerStreamingEcho(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClientStreamingEcho : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ClientStreamingEcho() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ClientStreamingEcho() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStreamingEcho(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::echo::EchoRequest>* /*reader*/, ::echo::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClientStreamingEcho(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BidirectionalStreamingEcho : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BidirectionalStreamingEcho() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_BidirectionalStreamingEcho() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidirectionalStreamingEcho(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::echo::EchoResponse, ::echo::EchoRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBidirectionalStreamingEcho(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UnaryEcho : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UnaryEcho() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UnaryEcho(context, request, response); }));
    }
    ~WithRawCallbackMethod_UnaryEcho() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnaryEcho(::grpc::ServerContext* /*context*/, const ::echo::EchoRequest* /*request*/, ::echo::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnaryEcho(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ServerStreamingEcho : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ServerStreamingEcho() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ServerStreamingEcho(context, request); }));
    }
    ~WithRawCallbackMethod_ServerStreamingEcho() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerStreamingEcho(::grpc::ServerContext* /*context*/, const ::echo::EchoRequest* /*request*/, ::grpc::ServerWriter< ::echo::EchoResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ServerStreamingEcho(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ClientStreamingEcho : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ClientStreamingEcho() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->ClientStreamingEcho(context, response); }));
    }
    ~WithRawCallbackMethod_ClientStreamingEcho() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStreamingEcho(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::echo::EchoRequest>* /*reader*/, ::echo::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* ClientStreamingEcho(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BidirectionalStreamingEcho : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BidirectionalStreamingEcho() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->BidirectionalStreamingEcho(context); }));
    }
    ~WithRawCallbackMethod_BidirectionalStreamingEcho() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BidirectionalStreamingEcho(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::echo::EchoResponse, ::echo::EchoRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* BidirectionalStreamingEcho(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnaryEcho : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UnaryEcho() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::echo::EchoRequest, ::echo::EchoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::echo::EchoRequest, ::echo::EchoResponse>* streamer) {
                       return this->StreamedUnaryEcho(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UnaryEcho() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnaryEcho(::grpc::ServerContext* /*context*/, const ::echo::EchoRequest* /*request*/, ::echo::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnaryEcho(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::echo::EchoRequest,::echo::EchoResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_UnaryEcho<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ServerStreamingEcho : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ServerStreamingEcho() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::echo::EchoRequest, ::echo::EchoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::echo::EchoRequest, ::echo::EchoResponse>* streamer) {
                       return this->StreamedServerStreamingEcho(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ServerStreamingEcho() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerStreamingEcho(::grpc::ServerContext* /*context*/, const ::echo::EchoRequest* /*request*/, ::grpc::ServerWriter< ::echo::EchoResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedServerStreamingEcho(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::echo::EchoRequest,::echo::EchoResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ServerStreamingEcho<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_UnaryEcho<WithSplitStreamingMethod_ServerStreamingEcho<Service > > StreamedService;
};

}  // namespace echo


#endif  // GRPC_echo_2eproto__INCLUDED
